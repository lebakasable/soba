#!/usr/bin/env -S sh -c 'mkdir -p build && ./soba noodle build/noodle.bc && clang -o build/noodle build/noodle.bc && ./build/noodle $@'

include noodle

fn bootstrap > u64 (
  (cmd (array "clang" "-o" "build/bootstrap" "bootstrap.bc" "-lLLVM") 5)
  (cmd (array "./build/bootstrap" "src/compiler.soba" "build/compiler.bc") 3)
  (cmd (array "clang" "-o" "soba" "build/compiler.bc" "-lLLVM") 5)
  (cmd (array "./soba" "src/compiler.soba" "build/stage2.bc") 3)
  (cmd (array "opt" "-Oz" "-o" "bootstrap.bc" "build/stage2.bc") 5)
)

fn compile_all_in dir: u64 > u64 (
  let files (files_in_dir dir)
  defer (free .0 files)

  for i .1 files do (
    let file (read (add .0 files (mul 8 i)))
    defer (free file)

    and (ends_with file ".soba") do (
      let soba_path (path (array dir file) 2)
      defer (free soba_path)
      let no_ext (substr file 0 (sub (strlen file) 5))
      defer (free no_ext)
      let no_ext (path (array "build" no_ext) 2)
      defer (free no_ext)
      let bc_path (concat (array no_ext ".bc") 2)
      defer (free bc_path)

      (cmd (array "./soba" soba_path bc_path) 3)
      (cmd (array "clang" "-lraylib" "-o" no_ext bc_path) 5)
    ) 
  )
)

fn test > u64 (
  (cmd (array "diff" "build/compiler.bc" "build/stage2.bc") 3)
  (compile_all_in "examples")
  (compile_all_in "examples/euler")
)

fn extern main argc: u64 argv: u64 > u64 (
  let subcommand (read (add 8 argv))

  if (not subcommand) do (
    (bootstrap)
    (test)
  ) if (streq subcommand "bootstrap") do (
    (bootstrap)
  ) if (streq subcommand "test") do (
    (test)
  ) if (streq subcommand "help") do (
    (printf "Usage: ./noodle [SUBCOMMAND]%c" '\n)
    (printf "SUBCOMMANDS:%c" '\n)
    (printf "  bootstrap    Bootstraps the compiler%c" '\n)
    (printf "  test         Runs some tests%c" '\n)
    (printf "  help         Prints this help message%c" '\n)
  ) do (
    (dprintf stderr "[ERROR] unknown subcommand `%s`%c" subcommand '\n)
    (die)
  )

  0
)
