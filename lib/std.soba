let HASH 35

let stdout 0
let stderr 1
let stdin 2
let EEXIST 17
let SIGTERM 15
let SEEK_SET 0
let SEEK_END 2
let ICANON 2
let ECHO 8
let TCSANOW 0
let TCSAFLUSH 2
let F_GETFL 3
let F_SETFL 4
let O_NONBLOCK 2048

fn extern dup2 oldfd: u64 newfd: u64 > u64.
fn extern exit status: u64 > u64.
fn extern variadic printf fmt: u64 > u64.
fn extern variadic dprintf fd: u64 fmt: u64 > u64.
fn extern variadic fprintf file: u64 fmt: u64 > u64.
fn extern fclose stream: u64 > u64.
fn extern feof stream: u64 > u64.
fn extern fopen path: u64 modes: u64 > u64.
fn extern fdopen fd: u64 modes: u64 > u64.
fn extern fwrite buffer: u64 blocSize: u64 blocCount: u64 stream: u64 > u64.
fn extern fseek stream: u64 offset: u64 origin: u64 > u64.
fn extern ftell stream: u64 > u64.
fn extern fread buffer: u64 size: u64 count: u64 stream: u64 > u64.
fn extern free ptr: u64 > u64.
fn extern getchar > u64.
fn extern getline lineptr: u64 n: u64 stream: u64 > u64.
fn extern malloc size: u64 > u64.
fn extern memchr ptr: u64 byte: u64 len: u64 > u64.
fn extern memcmp a: u64 b: u64 len: u64 > u64.
fn extern memset ptr: u64 byte: u64 len: u64 > u64.
fn extern perror message: u64 > u64.
fn extern putchar c: u64 > u64.
fn extern puts s: u64 > u64.
fn extern strcmp a: u64 b: u64 > u64.
fn extern strlen s: u64 > u64.
fn extern strcpy dest: u64 src: u64 > u64.
fn extern strncpy dest: u64 src: u64 count: u64 > u64.
fn extern strcat dest: u64 src: u64 > u64.
fn extern strdup str1: u64 > u64.
fn extern strerror error: u64 > u64.
fn extern mkdir pathname: u64 mode: u64 > u64.
fn extern fork > u64.
fn extern wait wstatus: u64 > u64.
fn extern execvp path: u64 argv: u64 > u64.
fn extern opendir dirname: u64 > u64.
fn extern readdir dirp: u64 > u64.
fn extern rewinddir dirp: u64 > u64.
fn extern closedir dirp: u64 > u64.
fn extern __errno_location > u64.
fn extern kill pid: u64 sig: u64 > u64.
fn extern getpid > u64.
fn extern getenv name: u64 > u64.
fn extern time arg: u64 > u64.
fn extern localtime time: u64 > u64.
fn extern usleep usec: u64 > u64.
fn extern srand seed: u64 > u64.
fn extern rand > u64.
fn extern isatty fildes: u64 > u64.
fn extern tcgetattr fildes: u64 termios_p: u64 > u64.
fn extern tcsetattr fildes: u64 optional_actions: u64 termios_p: u64 > u64.
fn extern variadic fcntl fd: u64 cmd: u64 > u64.

fn errno > u64 (
  (read (__errno_location))
)

fn not b: u64 > u64 (
  (eq b 0)
)

fn ne a: u64 b: u64 > u64 (
  (not (eq a b))
)

fn le a: u64 b: u64 > u64 (
  (not (lt b a))
)

fn gt a: u64 b: u64 > u64 (
  (not (le a b))
)

fn ge a: u64 b: u64 > u64 (
  (not (lt a b))
)

fn addp ptr: u64 off: u64 > u64 (
  (write ptr (add (read ptr) off))
)

fn subp ptr: u64 off: u64 > u64 (
  (write ptr (sub (read ptr) off))
)

fn mulp ptr: u64 off: u64 > u64 (
  (write ptr (mul (read ptr) off))
)

fn inc n: u64 > u64 (
  (add n 1)
)

fn dec n: u64 > u64 (
  (sub n 1)
)

fn incp n: u64 > u64 (
  (write n (add (read n) 1))
)

fn decp n: u64 > u64 (
  (write n (sub (read n) 1))
)

fn die > u64 (
  (exit 1)
)

fn assert condition: u64 message: u64 > u64 (
  or condition do (
    (puts message)
    (die)
  )
)

fn assert_errno condition: u64 message: u64 > u64 (
  or condition do (
    (perror message)
    (die)
  )
)

fn unreachable line: u64 > u64 (
  (dprintf stderr "%d: unreachable%c" line '\n)
  (die)
)

fn todo line: u64 > u64 (
  (dprintf stderr "%d: todo%c" line '\n)
  (die)
)

fn memdupz ptr: u64 len: u64 > u64 (
  let res (malloc (add len 1))
  (assert res "out of memory")
  (memcpy res ptr len)
  (write8 (add res len) 0)
  res
)

fn streq a: u64 b: u64 > u64 (
  (not (strcmp a b))
)

fn is_whitespace c: u64 > u64 (
  or (eq c ' ) or (eq c '\t) (eq c '\n)
)

fn is_digit c: u64 > u64 (
  and (ge c '0) (le c '9)
)

fn is_alphabetic c: u64 > u64 (
  or and (ge c 'a) (le c 'z)
     and (ge c 'A) (le c 'Z)
)

fn is_identifier_part c: u64 > u64 (
  or (is_alphabetic c) or (is_digit c) (eq c '_)
)

fn is_single_character_token c: u64 > u64 (
  or (eq c '() or (eq c ')) or (eq c '.) or (eq c ':) (eq c '>)
)

fn ends_with str: u64 suffix: u64 > u64 (
  (streq (add str (sub (strlen str) (strlen suffix))) suffix)
)

fn substr str: u64 start: u64 len: u64 > u64 (
  let result (malloc len)
  (strncpy result (add str start) len)
)

fn replace str: u64 rep: u64 with: u64 > u64 (
  let str_len (add (strlen str) 1)
  let result (malloc str_len)
  for i str_len do (
    let ch (read8 (add str i))
    (write (add result i) if (eq ch rep) with ch)
  )
  result
)

fn slurp_file path: u64 > u64 (
  let file (fopen path "rb")

  if file do (
    defer (fclose file)

    (fseek file 0 SEEK_END)
    let size (ftell file)
    (fseek file 0 SEEK_SET)

    if (gt size 0) do (
      let buffer (malloc (add size 1))
      if buffer do (
        (fread buffer 1 size file)
        (write8 (add buffer size) 0)
        buffer
      ) 0
    ) 0
  ) 0
)

